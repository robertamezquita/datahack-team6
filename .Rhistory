install.packages("ggnet")
install.packages("GGally")
devtools::install_github("briatte/ggnet")
install.packages("igraph")
getwd()
list.files("data")
setwd("analysis")
gSub
gSub
getwd()
q()
n
list.files("data")
head(complaint)
complaint
list.files("R")
head(edgelist)
head(edgelist)
print(edgelist, n = 100)
head(edgelist)
head(complaint)
complaints_per_officer
head(complaint)
table(complaint$officer_id)
summary(table(complaint$officer_id))
head(complaint)
complaints_per_officer
?n_distinct
head
filter(complaints, officer_id == 3)
filter(complaint, officer_id == 3)
filter(complaint, officer_id == 3)$crid
unique(filter(complaint, officer_id == 3)$crid)
?edgelist
filter(edgelist, officer_id.1 == 3)
filter(edgelist, officer_id.1 == 3)
head)edgelist)
head(edgelist)
filter(edgelist, officer_id.1 == 3)
dplyr::filter(edgelist, officer_id.1 == 3)
head(edgelist)
q()
n
edgelist
filter(edgelist, o1 == 3)
edgelist %>% select(o1)
head
head(complaints_per_officer)
complaints_per_officer
tmp
head(num_unique_partners)
head(complaints_per_officer)
head(tmp)
filter(tmp, complaints_per_officer == 1, num_unique_partners == 1)
tmp
log10(1)
filter(tmp, num_unique_partners > 75, complaints_per_officer > 30)
head(num_unique_partners)
filter(num_unique_partners, num_unique_partners == 76)
filter(complaints, officer_id == 47)
filter(complaint, officer_id == 47)
filter(complaint, officer_id == 47) %>% print(n = 100)
filter(complaint, officer_id == 47) %>% print(n = 100)
filter(officer, officer_id == 47) %>% print(n = 100)
filter(complaint, officer_id == 47) %>% print(n = 100)
head(tmp)
head(tmp)
theme_grey()
edgelist
complaints_per_officer
filter(complaint, officer_id == 3)
num_unique_partners
complaints_per_officer
edgelist
filter(edgelist, officer_id.1 == 1)
filter(edgelist, officer_id.1 == 3)
filter(edgelist, officer_id.1 == 3) %>% print(n = 100)
head(tmp)
library(RCy3)
head(edgelist)
?initNodeAttribute
?nodeData
edgelist
head(officer)
colnames(officer)
head(complaint)
complaint
officer
list.files()
getwd()
officers
head(officers)
q()
n
head(complaint)
head(officer)
head(edgelist)
complaint
officer
initNodeAttribute
?initNodeAttribute
?initNodeAttribute
cols
cols
cols
cols
cols
cols
cols
cols
cols
cols
cols[1]
cols[1]
names(cols)
cols
seq_along(cols)
types
types
cols
cols
cols
types
types
types
g
edgelist
?nodeData
?nodeData
?nodeData
?nodeData
officer
head(complaint)
complaint
officer
?nodeData
?nodeData
cols
officer
property <- "officer_id"
?addNode
?addNode
V
edL1
nodes
head(edgelist)
edL1
edgelist
i=1
tot_complaints
total_complaints
nodes
property
property in cols
cols
nodeData(g, n = 1, attr = property) <- 1
nodeData(g, n = 1, attr = "first_name") <- "bob"
nodeData
nodes
g
?nodeData
?addNode
?addNode
gR
gR@nodes
g
cols
types
g
g@nodes
g
g[[1]]
str(g)
g@edgeL
g@nodeData
property
?nodeData
g
str(g)
    officer %>% select_(property) %>% unlist
g
g[[1]]
str(g)
officer
complaint
head(officer)
g
cols
types
g
str(node)
node
g
str(g)
g@nodeData
g@nodeData[[1]]
g@nodeData$`1`
g@nodeData[[1]]
g@nodeData[1]
g@nodeData
g@nodeData %>% as.list
g@nodeData %>% melt
g
g@nodes
g@nodeData
str(g)
edgelist
?addEdge
addEdge
g
g
g
str(g)
g
?nodeData
nodeData(g, "1")
source("https://bioconductor.org/biocLite.R")
biocLite("RCy3")
a
biocLite("RCy3")
library(RCy3)
q()
n
g
g
?addEdge
edgeData(g)
edgeData(g, from = 1, to = 2)
edgeData(g, from = "1", to = "2")
edgeData(g)
g
names(str(g))
g
str(g)
g@edgeL
g
g@edges
g@edge
g@edgeData
g@edgeData$`1|2`
g@edgeData[[`1|2`]]
g@edgeData[["`1|2`"]]
g@edgeData["`1|2`"]
edgeData(g, "1", "2")
noa.names
noa.names(g)
RCy3::
?eda.names
eda.names(g)
nrow(edgelist)
dim(officer)
g
head(V(g)$name)
head(V(g))
head(g)
head(officer)
g
str(g)
str(g@nodeData)
head(g@nodeData)
summary(g@nodeData)
summary(g@nodeData[[1]])
str(g@nodeData)
str(g@edgeData)
traceback()
sendEdges
sendEdges
sendEdges()
showMethods("sendEdges")
?sendEdges
getAnywhere(sendEdges)
getAnywhere(plot)
getMethod(sendEdges)
showMethods(sendEdges)
getMethod(sendEdges, "CytoscapeWindowClass")
cw
obj <- cw
cw@graph = g
net.SUID
version
edgenames(loc.obj@graph)
edgeNames(loc.obj@graph)
loc.obj
obj
g
loc.obj@graph
edgeNames(loc.obj@graph)
diff.edges
tbl.edges
RCy3::tbl.edges
RCy3:::tbl.edges
is.class.graph
RCy3:::is.class.graph
edgeNames(g)
cy2.edge.names
cy2.edge.names(g)
cy2.edge.names(cw@graph)
cy2.edge.names(g)
edge.names.tbl.records
edge.names.tbl.records
g
edgeData(g)
edgeData(g, 1, 2)
edgeL
edgeL(g)
q()
n
